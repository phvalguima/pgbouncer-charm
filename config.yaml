"options":
  "extra_packages":
    "description": "Space separated list of extra deb packages to install.\n"
    "type": "string"
    "default": ""
  "package_status":
    "default": "install"
    "type": "string"
    "description": "The status of service-affecting packages will be set to this value\
      \ in the dpkg database. Valid values are \"install\" and \"hold\".\n"
  "install_sources":
    "description": "List of extra apt sources, per charm-helpers standard format (a\
      \ yaml list of strings encoded as a string). Each source may be either a line\
      \ that can be added directly to sources.list(5), or in the form ppa:<user>/<ppa-name>\
      \ for adding Personal Package Archives, or a distribution component to enable.\n"
    "type": "string"
    "default": ""
  "install_keys":
    "description": "List of signing keys for install_sources package sources, per\
      \ charmhelpers standard format (a yaml list of strings encoded as a string).\
      \ The keys should be the full ASCII armoured GPG public keys. While GPG key\
      \ ids are also supported and looked up on a keyserver, operators should be aware\
      \ that this mechanism is insecure. null can be used if a standard package signing\
      \ key is used that will already be installed on the machine, and for PPA sources\
      \ where the package signing key is securely retrieved from Launchpad.\n"
    "type": "string"
    "default": ""
  "nagios_context":
    "default": "juju"
    "type": "string"
    "description": |
      Used by the nrpe subordinate charms.
      A string that will be prepended to instance name to set the host name
      in nagios. So for instance the hostname would be something like:
          juju-myservice-0
      If you're running multiple environments with the same services in them
      this allows you to differentiate between them.
  "nagios_servicegroups":
    "default": ""
    "type": "string"
    "description": |
      A comma-separated list of nagios servicegroups.
      If left empty, the nagios_context will be used as the servicegroup
  "client_login_timeout":
    "default": !!int "60"
    "type": "int"
    "description": "If a client connects but does not manage to login in this amount\
      \ of time, it will be disconnected. Mainly needed to avoid dead connections\
      \ stalling SUSPEND and thus online restart. [seconds]\n"
  "default_pool_size":
    "default": !!int "20"
    "type": "int"
    "description": "How many server connections to allow per user/database pair. Can\
      \ be overridden in the per-database configuration.\n"
  "ignore_startup_parameters":
    "default": "application_name"
    "type": "string"
    "description": "By default, PgBouncer allows only parameters it can keep track\
      \ of in startup packets - client_encoding, datestyle, timezone and standard_conforming_strings.\n\
      All other parameters will raise an error. To allow other parameters, they can\
      \ be specified here, so that pgbouncer knows that they are handled by admin\
      \ and it can ignore them.\n"
  "listen_port":
    "default": !!int "6432"
    "type": "int"
    "description": "Which port to listen on. Applies to both TCP and Unix sockets.\n"
  "max_client_conn":
    "default": !!int "100"
    "type": "int"
    "description": "Maximum number of client connections allowed. When increased then\
      \ the file descriptor limits should also be increased. Note that actual number\
      \ of file descriptors used is more than max_client_conn.\n"
  "pool_mode":
    "default": "transaction"
    "type": "string"
    "description": "Specifies when a server connection can be reused by other clients.\n"
  "reserve_pool_size":
    "default": !!int "0"
    "type": "int"
    "description": "How many additional connections to allow to a pool. 0 disables.\n"
  "server_check_delay":
    "default": !!int "30"
    "type": "int"
    "description": "How long to keep released connections available for immediate\
      \ re-use, without running sanity-check queries on it. If 0 then the query is\
      \ ran always.\n"
  "server_connect_timeout":
    "default": !!int "15"
    "type": "int"
    "description": "If connection and login wont finish in this amount of time, the\
      \ connection will be closed. [seconds]\n"
  "server_idle_timeout":
    "default": !!int "600"
    "type": "int"
    "description": "If a server connection has been idle more than this many seconds\
      \ it will be dropped. If 0 then timeout is disabled. [seconds]\n"
  "server_lifetime":
    "default": !!int "3600"
    "type": "int"
    "description": "The pooler will try to close server connections that have been\
      \ connected longer than this. Setting it to 0 means the connection is to be\
      \ used only once, then closed. [seconds]\n"
  "server_login_retry":
    "default": !!int "15"
    "type": "int"
    "description": "If login failed, because of failure from connect() or authentication\
      \ that pooler waits this much before retrying to connect. [seconds]\n"
  "wait_warn":
    "default": !!int "5"
    "type": "int"
    "description": "The parameters to pass to the nrpe plugin check_pgbouncer_pool_waittime\
      \ for warning level.\n"
  "wait_crit":
    "default": !!int "20"
    "type": "int"
    "description": "The parameters to pass to the nrpe plugin check_pgbouncer_pool_waittime\
      \ for critical level.\n"
  "conn_warn":
    "default": !!int "75"
    "type": "int"
    "description": "The parameters to pass to the nrpe plugin check_pgbouncer_connection_count\
      \ for warn level.\n"
  "conn_crit":
    "default": !!int "90"
    "type": "int"
    "description": "The parameters to pass to the nrpe plugin check_pgbouncer_connection_count\
      \ for critical level.\n"
